{
    "project": {
        "name": "The cros-admin API",
        "description": "The cros-admin API, The classes consist of an application to administrate the cros-core functionalities.",
        "version": "1.0.0",
        "url": "http://example.com/",
        "logo": "../img/logoWithText_small.png"
    },
    "files": {
        "js\\components\\charts\\lineChart.js": {
            "name": "js\\components\\charts\\lineChart.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\components\\charts\\pieChart.js": {
            "name": "js\\components\\charts\\pieChart.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\components\\maps\\DroneMap.js": {
            "name": "js\\components\\maps\\DroneMap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\components\\maps\\assignmentMap.js": {
            "name": "js\\components\\maps\\assignmentMap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\components\\maps\\assignmentsAddMap.js": {
            "name": "js\\components\\maps\\assignmentsAddMap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\components\\maps\\basestationAddMap.js": {
            "name": "js\\components\\maps\\basestationAddMap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\components\\maps\\basestationMap.js": {
            "name": "js\\components\\maps\\basestationMap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\components\\maps\\dashboardMap.js": {
            "name": "js\\components\\maps\\dashboardMap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\components\\ManualControl.js": {
            "name": "js\\components\\ManualControl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\components\\popupMap.js": {
            "name": "js\\components\\popupMap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\components\\tableController.js": {
            "name": "js\\components\\tableController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\ManualController.js": {
            "name": "js\\controllers\\ManualController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\appcontroller.js": {
            "name": "js\\controllers\\appcontroller.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\assignmentController.js": {
            "name": "js\\controllers\\assignmentController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\basestationController.js": {
            "name": "js\\controllers\\basestationController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\dashboardController.js": {
            "name": "js\\controllers\\dashboardController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\dronesController.js": {
            "name": "js\\controllers\\dronesController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\listsController.js": {
            "name": "js\\controllers\\listsController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\userController.js": {
            "name": "js\\controllers\\userController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\routers\\assignmentsRouter.js": {
            "name": "js\\routers\\assignmentsRouter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\routers\\basestationsRouter.js": {
            "name": "js\\routers\\basestationsRouter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\routers\\dronesRouter.js": {
            "name": "js\\routers\\dronesRouter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\routers\\superRouter.js": {
            "name": "js\\routers\\superRouter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\routers\\usersRouter.js": {
            "name": "js\\routers\\usersRouter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\adapter.js": {
            "name": "js\\adapter.js",
            "modules": {
                "cros-admin": 1
            },
            "classes": {
                "CustomAdapter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\authManager.js": {
            "name": "js\\authManager.js",
            "modules": {},
            "classes": {
                "AuthManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\socketmanager.js": {
            "name": "js\\socketmanager.js",
            "modules": {},
            "classes": {
                "SocketManager": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "cros-admin": {
            "name": "cros-admin",
            "submodules": {},
            "classes": {
                "CustomAdapter": 1,
<<<<<<< HEAD
                "SocketManager": 1
=======
                "AuthManager": 1
>>>>>>> dev
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
<<<<<<< HEAD
            "file": "js\\socketmanager.js",
            "line": 5
=======
            "file": "js\\authManager.js",
            "line": 9
>>>>>>> dev
        }
    },
    "classes": {
        "CustomAdapter": {
            "name": "CustomAdapter",
            "shortname": "CustomAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cros-admin",
            "namespace": "",
            "file": "js\\adapter.js",
            "line": 5,
            "description": "This will create a new RestAdapter with support for HATEOAS.",
            "is_constructor": 1,
            "extends": "DS.RESTAdapter"
        },
<<<<<<< HEAD
        "SocketManager": {
            "name": "SocketManager",
            "shortname": "SocketManager",
=======
        "AuthManager": {
            "name": "AuthManager",
            "shortname": "AuthManager",
>>>>>>> dev
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "cros-admin",
            "namespace": "",
<<<<<<< HEAD
            "file": "js\\socketmanager.js",
            "line": 5,
            "description": "This class will manage the connection with a socketmanager and the incomming data.\nFor now this socketManager does not support sending data over the websocket to the server. Data can only be received.\nThe socketmanager will connect to the websocket, it will try to reconnect to the socket automatically.\nIt will also inform listeners of new messages arriving.",
=======
            "file": "js\\authManager.js",
            "line": 9,
            "description": "This class will manage the authentication with the REST-API. This consists of keeping track of the authentication token,\nthe cookie with the authentication token, the current user,...",
>>>>>>> dev
            "is_constructor": 1,
            "extends": "Ember.Object"
        }
    },
    "classitems": [
        {
            "file": "js\\components\\charts\\lineChart.js",
            "line": 1,
            "description": "Created by Eveline on 21/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\charts\\pieChart.js",
            "line": 1,
            "description": "Created by Eveline on 21/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\maps\\DroneMap.js",
            "line": 1,
            "description": "Created by matthias on 3/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\maps\\assignmentMap.js",
            "line": 1,
            "description": "Created by matthias on 3/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\maps\\assignmentsAddMap.js",
            "line": 1,
            "description": "Created by matthias on 11/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\maps\\basestationAddMap.js",
            "line": 1,
            "description": "Created by matthias on 6/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\maps\\basestationMap.js",
            "line": 1,
            "description": "Created by matthias on 3/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\maps\\dashboardMap.js",
            "line": 1,
            "description": "Created by matthias on 14/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\ManualControl.js",
            "line": 1,
            "description": "Created by matthias on 25/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\popupMap.js",
            "line": 1,
            "description": "Created by matthias on 14/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\tableController.js",
            "line": 3,
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\tableController.js",
            "line": 121,
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\tableController.js",
            "line": 126,
            "class": "CustomAdapter"
        },
        {
            "file": "js\\components\\tableController.js",
            "line": 131,
            "class": "CustomAdapter"
        },
        {
            "file": "js\\controllers\\ManualController.js",
            "line": 1,
            "description": "Created by matthias on 10/05/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\controllers\\ManualController.js",
            "line": 114,
            "description": "This function will close the active videowebsocket.\nIf no video websocket is active, this will do nothing.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\controllers\\appcontroller.js",
            "line": 1,
            "description": "Created by matthias on 30/03/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\controllers\\assignmentController.js",
            "line": 1,
            "description": "Created by matthias on 4/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\controllers\\assignmentController.js",
            "line": 5,
            "description": "Created by matthias on 3/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\controllers\\basestationController.js",
            "line": 1,
            "description": "Created by matthias on 3/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\controllers\\dashboardController.js",
            "line": 1,
            "description": "Created by matthias on 14/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\controllers\\dronesController.js",
            "line": 1,
            "description": "Created by Eveline on 25/03/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\controllers\\listsController.js",
            "line": 1,
            "description": "Created by Eveline on 5/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\controllers\\userController.js",
            "line": 1,
            "description": "Created by Eveline on 9/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\routers\\assignmentsRouter.js",
            "line": 1,
            "description": "Created by matthias on 11/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\routers\\basestationsRouter.js",
            "line": 1,
            "description": "Created by matthias on 11/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\routers\\dronesRouter.js",
            "line": 1,
            "description": "Created by matthias on 11/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\routers\\superRouter.js",
            "line": 1,
            "description": "Created by matthias on 11/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\routers\\usersRouter.js",
            "line": 1,
            "description": "Created by matthias on 11/04/2015.",
            "class": "CustomAdapter"
        },
        {
            "file": "js\\adapter.js",
            "line": 12,
            "description": "The root url to the used REST-API",
            "access": "public",
            "tagname": "",
            "required": 1,
            "itemtype": "property",
            "name": "host",
            "type": "String",
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 20,
            "description": "The namespace of the REST-API (relative to the host url)",
            "access": "public",
            "tagname": "",
            "default": "\"\"",
            "itemtype": "property",
            "name": "namespace",
            "type": "String",
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 28,
            "description": "The key which will contain the HATEOAS links within json reponses",
            "access": "public",
            "tagname": "",
            "default": "\"links\"",
            "itemtype": "property",
            "name": "linksKey",
            "type": "String",
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 36,
            "description": "The delimiter used to build the keys in the linkLibrary",
            "access": "public",
            "tagname": "",
            "default": "\"-\"",
            "itemtype": "property",
            "name": "delimiter",
            "type": "String",
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 44,
            "description": "This object contains all links to REST calls. They are fetched from the REST responses and stored as a dictionary\nthat maps keys on urls.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "linkLibrary",
            "type": "{object}",
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 54,
            "description": "This method will perform the initialization of the adapter. It will insert one link in the {{#crossLink \"CustomAdapter/linkLibrary:property\"}}{{/crossLink}},\nnamely to the root (+namespace) of the REST-API.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 66,
            "description": "This function will clear all links from the linkLibrary",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "clearLinks",
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 76,
            "description": "This property contains all the headers that should be sent with every request.\nThis now only contains the correct authentication token for the REST-API.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "headers",
            "type": "Object",
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 89,
            "description": "This function will process a received links object and enter the links in the {{#crossLink \"CustomAdapter/linkLibrary:property\"}}{{/crossLink}}.\nThis is done by iterating over the links available and inserting them with the correct key (based on the provided root).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "insertLinks",
            "params": [
                {
                    "name": "linksObj",
                    "description": "the object containing all the links"
                },
                {
                    "name": "root",
                    "description": "the root key that should be used for these links."
                }
            ],
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 113,
            "description": "This function will search through the response json and search for objects with key {{#crossLink \"CustomAdapter/linksKey:property\"}}{{/crossLink}}.\nFor each object it finds, it will call {{#crossLink \"CustomAdapter/insertLinks:method\"}}{{/crossLink}} so that the contained links are added to the linkLibrary.\n\nIn current version the home link is treated separately. Since the links in the root of this specific REST-API are not contained within a linkskey object,\nthey are just added to the linkLibrary directly.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "processLinks",
            "params": [
                {
                    "name": "data",
                    "description": "The response json"
                },
                {
                    "name": "root",
                    "description": "The root key of the links that should be added."
                }
            ],
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 147,
            "description": "Progress of an ajax call can be tracked with nProgress library.\nStarting this tracking can be done with this function.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "progressTracker",
            "return": {
                "description": "",
                "type": "XMLHttpRequest"
            },
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
            "line": 176,
            "description": "When any request made by the adapter fails, this function is called. It will do necessary checks of the errorstatus and\nthe error response. If necessary, the adapter will call the logout functionality of the authManager.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onfailure",
            "params": [
                {
                    "name": "data",
                    "description": "the response from the ajax call"
                }
            ],
            "return": {
                "description": "the response from the ajax call (for further chaining)",
                "type": "Object"
            },
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
<<<<<<< HEAD
            "line": 192,
=======
            "line": 201,
>>>>>>> dev
            "description": "This method will fetch any missing links in the linklibrary. It will call ajax and use {{#crossLink \"CustomAdapter/processLinks:method\"}}{{/crossLink}}\nto update the linksLibrary.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recursiveFetch",
            "params": [
                {
                    "name": "urlObj",
                    "description": "the url to be fetched"
                },
                {
                    "name": "store",
                    "description": "the root key to use when inserting the links."
                }
            ],
            "return": {
                "description": "Any code executed after this promise will have the necessary links in the linkLibrary",
                "type": "Promise"
            },
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
<<<<<<< HEAD
            "line": 209,
=======
            "line": 218,
>>>>>>> dev
            "description": "This function will return the correct url based on key parameters. This function has two part:\n     1) Using the input parameters, the correct key is assembled. This is done by concatenating\n        the the input parameters, separated with the specified {{#crossLink \"CustomAdapter/delimiter:property}}{{/crossLink}}.\n     2) Once the key has been constructed, the function will check whether or not this key is available in the linkLibrary. If not\n        it will recursively remove one part of the key (based on de delimiter) and check whether this key is available. It continues untill\n        a link is found or until no key is left (if this is the case, the home link will be fetched).\n        This implies that every url (linked to key 'k') should reply with links to all possible keys 'k' + delimiter + 't' (where 't' are all possible key parts after 'k').",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "resolveLinkInner",
            "params": [
                {
                    "name": "store",
                    "description": "the type of entity that is request"
                },
                {
                    "name": "id",
                    "description": "the id of the entity requested"
                },
                {
                    "name": "action",
                    "description": "the action that is called on this entity. This action can be a string or an array. If it is an array, all elements will be concatenated (seperated by the delimiter)."
                }
            ],
            "return": {
                "description": "an object containing the url and the key.",
                "type": "Object"
            },
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
<<<<<<< HEAD
            "line": 269,
=======
            "line": 278,
>>>>>>> dev
            "description": "This function has the same functionality as {{#crossLink \"CustomAdapter/resolveLinkInner:method\"}}{{/crossLink}}. However, this method will chain\nthis call to any ongoing requests. This is necessary, if any of the previous requests is retrieving a link used in this function.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "resolveLink",
            "params": [
                {
                    "name": "store",
                    "description": "the type of entity that is request"
                },
                {
                    "name": "id",
                    "description": "the id of the entity requested"
                },
                {
                    "name": "action",
                    "description": "the action that is called on this entity. This action can be a string or an array. If it is an array, all elements will be concatenated (seperated by the delimiter)."
                }
            ],
            "return": {
                "description": "a promise which will resolve in an object containing the requested url and the key used.",
                "type": "Object|Promise"
            },
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
<<<<<<< HEAD
            "line": 291,
=======
            "line": 300,
>>>>>>> dev
            "description": "This function will execute the actual ajax call. It uses the functionality of jquery. For more explanation please checkout their documentation pages.\nThis function will set all properties in the ajax call. Extra properties can be given via the options paramter.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "url",
                    "description": "The request url"
                },
                {
                    "name": "method",
                    "description": "The HTTP method"
                },
                {
                    "name": "options",
                    "description": "Extra options that should be set in the ajax call."
                }
            ],
            "return": {
                "description": "The response data from the REST-call.",
                "type": "Object|Promise"
            },
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
<<<<<<< HEAD
            "line": 322,
=======
            "line": 331,
>>>>>>> dev
            "description": "The current promise being handled. If null, no request is busy.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "currentRequest",
            "type": "Promise",
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
<<<<<<< HEAD
            "line": 330,
=======
            "line": 339,
>>>>>>> dev
            "description": "This function will resolve any request to the backend REST-api.\nIt will first resolve the link based on the input parameters (using {{#crossLink \"CustomAdapter/resolveLink:method\"}}{{/crossLink}}).\nUsing the correct link it will do a jquery ajax call (using {{#crossLink \"CustomAdapter/ajax:method\"}}{{/crossLink}}).\nFinally any links contained in the response data will be processed (using {{#crossLink \"CustomAdapter/processLinks:method\"}}{{/crossLink}}).\nThis function assumes all REST-calls return an object with root element \"store\". This root element will be removed from the returned value.\nAlso if the result contains multiple elements, this should be contained within an array with key \"resource\".\n\nNote: This request will be chained to any previous ongoing requests. Also, this request will be set as the new {{#crossLink \"CustomAdapter/currentRequest:property\"}}{{/crossLink}}.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "store",
                    "description": "the type of the entity requested"
                },
                {
                    "name": "id",
                    "description": "the id of the entity requested"
                },
                {
                    "name": "action",
                    "description": "the actions called on this entity. This can be either a string or an array of strings. In case of an array, the elements are concatenated separated with the delimiter."
                },
                {
                    "name": "params",
                    "description": "Any extra ajax parameters can be set in this object. Also, if this object contains a query object, this will be used as query paramters after the url."
                }
            ],
            "return": {
                "description": "The response data from the REST-call",
                "type": "Object|Promise"
            },
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
<<<<<<< HEAD
            "line": 378,
=======
            "line": 387,
>>>>>>> dev
            "description": "This function will execute any post requests to the REST-API.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "store",
                    "description": "The type of entity that will be posted"
                },
                {
                    "name": "postData",
                    "description": "The data that will be posted."
                }
            ],
            "return": {
                "description": "the REST-call result in json.",
                "type": "Object|Promise"
            },
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
<<<<<<< HEAD
            "line": 397,
=======
            "line": 406,
>>>>>>> dev
            "description": "This function will execute a PUT request to the REST-API.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "edit",
            "params": [
                {
                    "name": "store",
                    "description": "The type of entity that will be updated"
                },
                {
                    "name": "id",
                    "description": "the id of the entity that will be updated"
                },
                {
                    "name": "editData",
                    "description": "the data containing the updated entity"
                }
            ],
            "return": {
                "description": "the data returned from the REST-call.",
                "type": "Object|Promise"
            },
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\adapter.js",
<<<<<<< HEAD
            "line": 416,
=======
            "line": 425,
>>>>>>> dev
            "description": "The function will execute a DELETE request to the REST-API.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "store",
                    "description": "The type of entity that will be removed"
                },
                {
                    "name": "id",
                    "description": "the id of the entity that will be removed"
                }
            ],
            "return": {
                "description": "the data returned from the REST-call.",
                "type": "Object|Promise"
            },
            "class": "CustomAdapter",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 1,
            "description": "Created by matthias on 30/03/2015.",
<<<<<<< HEAD
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 17,
            "description": "This object will keep track of all registered listeners. When a message arrives, the correct listeners will be notified.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "listeners",
            "type": "Object",
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 24,
            "description": "This object is the websocket that is currently in use.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "socket",
            "type": "Object",
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 31,
            "description": "This boolean will be true is the connection with the server is open. If not, it is false.",
            "access": "public",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "connection",
            "type": "Boolean",
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 39,
            "description": "This boolean will represents whether the socketManager will try to reconnect when connection is lost.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "reconnect",
            "type": "Boolean",
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 46,
            "description": "If this property is set, the socketmanager will try to connect to a websocket on this url.\nIf this property is not set, it will fetch the url from the adapter using the key \"datasocket\".",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "defaultUrl",
            "type": "String",
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 55,
            "description": "This method will initiate the connection with the server.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initConnection",
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 66,
            "description": "This method will setup the connection with the socket. Note that it will first check if any connection is already setup.\nIf no connection is setup (and {{#crossLink \"SocketManager/reconnect:property\"}}{{/crossLink}} is set to true), the connection will be setup.\n\nFirst of all, the url is fetched, either from {{#crossLink \"SocketManager/defaultUrl:property\"}}{{/crossLink}} or from the available adapter.\nThis function will also change the protocol of the url from http(s) to ws, if necessary.\n\nConnection will be setup with the websocket using the authentication token from {{#crossLink \"AuthManager\"}}{{/crossLink}}. If connection is set up,\nthe mechanisms to notify listeners are set.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "connect",
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 110,
            "description": "This method will handle the loss of connection.\nIt will send a notification message to listeners with the information that the connection has been lost.\n\nAlso, after a delay of 1 second, it set the {{#crossLink \"SocketManager/connection:property\"}}{{/crossLink}} property to false. This will automatically  initiate the\n{{#crossLink \"SocketManager/connect:method\"}}{{/crossLink}} method. (Note that this will not reconnect the socket if {{#crossLink \"SocketManager/reconnect:property\"}}{{/crossLink}} has not been set).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onClose",
            "params": [
                {
                    "name": "self",
                    "description": "the SocketManager itself"
                }
            ],
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 129,
            "description": "This method will do the correct action if the websocket has been opened.\nIn this implementation it will only send a notification to the correct listeners.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onOpen",
            "params": [
                {
                    "name": "self",
                    "description": "the SocketManager itself"
                }
            ],
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 141,
            "description": "This function will close the socket connection. It will automatically set {{#crossLink \"SocketManager/reconnect:property\"}}{{/crossLink}} to false.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "disconnect",
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 153,
            "description": "This method will handle an incoming message from the server.\nThis mainly involves notifying the correct listeners.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onMessage",
            "params": [
                {
                    "name": "event",
                    "description": ""
                },
                {
                    "name": "self",
                    "description": ""
                }
            ],
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 175,
            "description": "If an object wants to receive a particular message from the websocket, it can register itself here.\nTherefore several parameters should be set. First of which is off course the type of message. Each message has a type which is a string.\nNext, an id can be set. If one is only interested in the messages of one specific entity this can be set via the id. However if this is not set (or set to 0), messages of all entities will be received.\nNote also, that all messages contain the id of the entity (even if the listener is registered with id 0).\nThe following parameter \"controllerName\" is an identification of the listener. This can be any unique string. It is used to avoid having duplicate listeners.\n\nLastly an callback method should be set. Whenever a message arrives, this specific method will be called.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "type",
                    "description": "The type of message that you want to receive"
                },
                {
                    "name": "id",
                    "description": "the id of the entity that you are interessted in"
                },
                {
                    "name": "controllerName",
                    "description": "the controllerName of the caller"
                },
                {
                    "name": "callback",
                    "description": "the method to execute when a message arrived"
                }
            ],
            "class": "SocketManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\socketmanager.js",
            "line": 204,
            "description": "If you are registered for a message and no longer want to receive any messages for it, you can unregister with this method.\nIf you are regstered with id 0, it is not possible to unregister for any specific id.\nIf you are not registered and call this function, nothing will happen.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "unregister",
            "params": [
                {
                    "name": "type",
                    "description": "The type of message that you no longer want to receive."
                },
                {
                    "name": "id",
                    "description": "The id of the entity you no longer need"
                },
                {
                    "name": "controllerName",
                    "description": "The controllerName of the caller"
                }
            ],
            "class": "SocketManager",
=======
            "class": "AuthManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 19,
            "description": "Is the name of the cookie in which the current authentication token will be stored.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "cookieName",
            "type": "String",
            "class": "AuthManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 26,
            "description": "After login, the user will be redirected to this route.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "redirectRoute",
            "type": "String",
            "class": "AuthManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 33,
            "description": "The token which is used to authenticate all calls to the REST-API.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "authToken",
            "type": "String",
            "class": "AuthManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 40,
            "description": "Contains the current logged in user.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_private_user",
            "type": "Object",
            "class": "AuthManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 47,
            "description": "Contains the current logged in user.\nIf no user information is available, this will be fetched by from the REST-API.\nIf you observe this property, it will automatically update when the user information is available.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "user",
            "type": "Object",
            "class": "AuthManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 61,
            "description": "Whether or not a user is logged in.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "isLoggedIn",
            "type": "Boolean",
            "class": "AuthManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 71,
            "description": "Removes any data from this class. Will also clear the linkLibrary from the adapter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "logout",
            "class": "AuthManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 84,
            "description": "Will process the login. It will store the correct authentication token  and fetch the user info.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "login",
            "params": [
                {
                    "name": "email",
                    "description": "the email address of the user"
                },
                {
                    "name": "password",
                    "description": "the password of the user"
                }
            ],
            "return": {
                "description": "When this promise resolves, the user info will be available and the authentication token will be stored.",
                "type": "Promise"
            },
            "class": "AuthManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 104,
            "description": "Get the user information from the REST-API.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "fetchUserInfo",
            "return": {
                "description": "When this promise resolves, the user information will be fetched.",
                "type": "Promise"
            },
            "class": "AuthManager",
            "module": "cros-admin"
        },
        {
            "file": "js\\authManager.js",
            "line": 118,
            "description": "This will return the authentication token.\nIf it is not available in memory it will be fetched from the cookie.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "",
            "return": {
                "description": "Authentication token",
                "type": "String"
            },
            "class": "AuthManager",
>>>>>>> dev
            "module": "cros-admin"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:147"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:176"
        },
        {
            "message": "replacing incorrect tag: returns with return",
<<<<<<< HEAD
            "line": " js\\adapter.js:192"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:209"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:269"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:291"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:330"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:378"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:397"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:416"
=======
            "line": " js\\adapter.js:201"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:218"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:278"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:300"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:339"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:387"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:406"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\adapter.js:425"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\authManager.js:84"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\authManager.js:104"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\authManager.js:118"
>>>>>>> dev
        },
        {
            "message": "Missing item type\nCreated by Eveline on 21/04/2015.",
            "line": " js\\components\\charts\\lineChart.js:1"
        },
        {
            "message": "Missing item type\nCreated by Eveline on 21/04/2015.",
            "line": " js\\components\\charts\\pieChart.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 3/04/2015.",
            "line": " js\\components\\maps\\DroneMap.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 3/04/2015.",
            "line": " js\\components\\maps\\assignmentMap.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 11/04/2015.",
            "line": " js\\components\\maps\\assignmentsAddMap.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 6/04/2015.",
            "line": " js\\components\\maps\\basestationAddMap.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 3/04/2015.",
            "line": " js\\components\\maps\\basestationMap.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 14/04/2015.",
            "line": " js\\components\\maps\\dashboardMap.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 25/04/2015.",
            "line": " js\\components\\ManualControl.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 14/04/2015.",
            "line": " js\\components\\popupMap.js:1"
        },
        {
            "message": "Missing item type",
            "line": " js\\components\\tableController.js:3"
        },
        {
            "message": "Missing item type",
            "line": " js\\components\\tableController.js:121"
        },
        {
            "message": "Missing item type",
            "line": " js\\components\\tableController.js:126"
        },
        {
            "message": "Missing item type",
            "line": " js\\components\\tableController.js:131"
        },
        {
            "message": "Missing item type\nCreated by matthias on 10/05/2015.",
            "line": " js\\controllers\\ManualController.js:1"
        },
        {
            "message": "Missing item type\nThis function will close the active videowebsocket.\nIf no video websocket is active, this will do nothing.",
            "line": " js\\controllers\\ManualController.js:114"
        },
        {
            "message": "Missing item type\nCreated by matthias on 30/03/2015.",
            "line": " js\\controllers\\appcontroller.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 4/04/2015.",
            "line": " js\\controllers\\assignmentController.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 3/04/2015.",
            "line": " js\\controllers\\assignmentController.js:5"
        },
        {
            "message": "Missing item type\nCreated by matthias on 3/04/2015.",
            "line": " js\\controllers\\basestationController.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 14/04/2015.",
            "line": " js\\controllers\\dashboardController.js:1"
        },
        {
            "message": "Missing item type\nCreated by Eveline on 25/03/2015.",
            "line": " js\\controllers\\dronesController.js:1"
        },
        {
            "message": "Missing item type\nCreated by Eveline on 5/04/2015.",
            "line": " js\\controllers\\listsController.js:1"
        },
        {
            "message": "Missing item type\nCreated by Eveline on 9/04/2015.",
            "line": " js\\controllers\\userController.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 11/04/2015.",
            "line": " js\\routers\\assignmentsRouter.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 11/04/2015.",
            "line": " js\\routers\\basestationsRouter.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 11/04/2015.",
            "line": " js\\routers\\dronesRouter.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 11/04/2015.",
            "line": " js\\routers\\superRouter.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 11/04/2015.",
            "line": " js\\routers\\usersRouter.js:1"
        },
        {
            "message": "Missing item type\nCreated by matthias on 30/03/2015.",
            "line": " js\\authManager.js:1"
        }
    ]
}